Suppose x = "pi" and y = "pie". 
The line of code x, y = y, x will swap the values of x and y, resulting in x = "pie" and y = "pi".

ANSWER: True

===========================================

Suppose x is an integer in the following code:

def f(x):
    while x > 3:
        f(x+1)


For any value of x, all calls to f are guaranteed to never terminate.

ANSWER: False

===========================================

A Python program always executes every line of code written at least once.

ANSWER: False

===========================================

Suppose you have two different functions that each assign a variable called x. 
Modifying x in one function means you always modify x in the other function for any x. 

ANSWER: False

===========================================

The following code will enter an infinite loop for all values of i and j.

while i >= 0:
    while j >= 0:
        print(i, j)

ANSWER: False

===========================================

It is always possible and feasible for a programmer to come up with test cases 
that run through every possible path in a program.

ANSWER: False

===========================================

Assume f() is defined. In the statement a = f(), a is always a function.

ANSWER: False

===========================================

A program that keeps running and does not stop is an example of a syntax error. 

ANSWER: False

===========================================

Consider the following function.

def f(x):
    a = []
    while x > 0:
        a.append(x)
        f(x-1)

A new object of type list is created for each recursive invocation of f.

ANSWER: True

===========================================

A tuple can contain a list as an element. 

ANSWER: True

===========================================

Consider the statement: L = {'1':1, '2':2, '3':3}. Which is correct?

L is a list
L is immutable
L contains 6 elements
L has integer keys
L maps strings to integers 

ANSWER: L maps strings to integers 

===========================================

Assume a break statement is executed inside a loop and that the loop is inside a function. 
Which of the following is correct?

The program might immediately terminate.
The function might immediately terminate.
The loop will always immediately terminate. (INCORRECT)
All of the above.
None of the above. 

DONT KNOW THE ANSWER 

===========================================

In Python, which of the following is a mutable object?

a string
a tuple 
a list (CORRECT ANSWER)
all of the above
none of the above 

===========================================

Assume the statement s[1024] = 3 does not produce an error message. This implies:

type(s) can be str
type(s) can be tuple
type(s) can be list
All of the above (INCORRECT ANSWER)

===========================================

Consider the code:

L = [1,2,3]
d = {'a': 'b'}
def f(x):
    return 3

Which of the following does NOT cause an exception to be thrown?

print(L[3])

print(d['b'])

for i in range(1000001, -1, -2):
    print(f)

print(int('abc'))

None of the above (INCORRECT ANSWER)

===========================================

Examine the following code snippet:

  stuff  = _____
  for thing in stuff:
        if thing == 'iQ':
           print("Found it")

Select all the values of the variable "stuff" that will make the code print "Found it".

["iBoy", "iGirl", "iQ", "iC","iPaid","iPad"] 
("iBoy", "iGirl", "iQ", "iC","iPaid","iPad")
[ ( "iBoy", "iGirl", "iQ", "iC","iPaid","iPad") ]
( [ "iBoy", "iGirl", "iQ", "iC","iPaid","iPad" ], )
["iQ"] 
"iQ" 

ANSWERS: 
["iBoy", "iGirl", "iQ", "iC","iPaid","iPad"] 
("iBoy", "iGirl", "iQ", "iC","iPaid","iPad")
["iQ"] 

===========================================

The following Python code is supposed to compute the square of an integer by using successive additions.

def Square(x):
    return SquareHelper(abs(x), abs(x))

def SquareHelper(n, x):
    if n == 0:
        return 0
    return SquareHelper(n-1, x) + x

Not considering recursion depth limitations, what is wrong with this implementation of procedure Square? 
Check all that apply.

It is going to return a wrong value.

The term Square is a reserved Python keyword.

Function names cannot start with a capital letter. (INCORRECT ANSWER, if this option only selected)

The function is never going to return anything.

Python has arbitrary precision arithmetic.

This function will not work for negative numbers.

The call SquareHelper(abs(x), abs(x)) won't work because you can't have abs(x) as both parameters.

Nothing is wrong; the code is fine as-is. 

===========================================